;; Menu Inicial
;; Função responsável por gerar o menu inicial da aplicação.
(defun main-menu ()
  (format t "~%***************************~%")
  (format t "*       Dots & Boxes      *~%")
  (format t "***************************~%")
  (format t "* 1 - Escolher problema   *~%")
  (format t "* 0 - Fechar              *~%")
  (format t "***************************~%~%")

  (format t "Opção > ")
  (let ((option (read)))
    (cond ((not (numberp option)) (format t "Valor inválido~%~%") (main-menu))
          ((= option 1) (problems-menu))
          (T (format t "Fim de jogo.")))))

;; Menu de Problemas
;; Função responsável por gerar o menu para escolha do problema.
(defun problems-menu ()
  (format t "~%***************************~%")
  (format t "*         Problemas       *~%")
  (format t "***************************~%")
  (format t "* 0 a 5 - Dificuldade     *~%")
  (format t "* 6 - Voltar              *~%")
  (format t "***************************~%~%")

  (format t "Opção > ")
  (let ((problem-case (read)))
    (with-open-file (f "D:\D:\IA-Projeto\problemas.dat" :direction :input)
      (let ((cases (read f)))
        (cond ((not (numberp option)) (format t "Valor inválido~%~%") (problems-menu))
              ((and (>= problem-case 0) (<= problem-case 5))
               (algorithms-menu (nth problem-case cases)))
              ((= problem-case 6) (main-menu))
              (T (format t "Fim de jogo.")))))))

;; Menu de Algoritmos
;; Função responsável por gerar o menu para escolha do algoritmo.
(defun algorithms-menu (problem)
  (format t "~%***************************~%")
  (format t "*        Algoritmos       *~%")
  (format t "***************************~%")
  (format t "* 1 - BFS                 *~%")
  (format t "* 2 - DFS                 *~%")
  (format t "* 3 - A*                  *~%")
  (format t "* 0 - Voltar              *~%")
  (format t "***************************~%~%")

  (format t "Opção > ")
  (let ((option (read)))
    (cond ((not (numberp option)) (format t "Valor inválido~%~%") (algorithms-menu problem))
          ((= option 1) (progn (format t "BFS:~%")
                          (first problem)
                          (bfs problem (operators))))
          ((= option 2) (progn (format t "DFS:~%")
                          (first problem)
                          (format t "Limite > ")
                          (let ((limit (read)))
                            (cond ((numberp limit)
                                   (dfs problem (operators) limit))
                                  (T (progn (format t "Valor inválido~%~%") (algorithms-menu problem)))))))
          ((= option 3) (progn (format t "A*:~%")
                          (first problem)
                          (heuristic boxes closed-boxes)))
          (T (format t "Fim de jogo.")))))